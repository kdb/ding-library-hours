<?php
/**
 * @file
 * Extended opening hours widget for Ding libraries.
 */

/**
 * Implements hook_block().
 */
function ding_library_hours_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        'today' => array(
          'info' => t('Library opening hours for the day'),
          'cache' => BLOCK_NO_CACHE,
        ),
      );
    break;
    case 'view':
      $block = array();

      $hours = ding_library_hours_get_day(date('Y-m-d', $_SERVER['REQUEST_TIME']));

      $block['title'] = t('Opening hours for today');
      $block['content'] = theme('ding_library_hours_day', $hours);

      return $block;
  }
}

/**
 * Implements hook_theme().
 */
function ding_library_hours_theme($existing, $type, $theme, $path) {
  return array(
    'ding_library_hours_day' => array(
      'arguments' => array('hours' => NULL),
      'path' => $path . '/templates',
      'template' => 'ding-library-hours-day',
    ),
    'ding_library_hours_time' => array(
      'arguments' => array('time' => NULL),
    ),
  );
}

/**
 * Get opening hours for a day.
 *
 * @param string $date
 *   The date to get hours for.
 *
 * @return array
 *   Return array of hours, grouped by node.
 */
function ding_library_hours_get_day($date) {
  $cache_key = __FUNCTION__ . ':' . $date;

  if (!$reset && $cache = cache_get($cache_key)) {
    return $cache->data;
  }
  else {
    $hours = array();

    $node_query = db_query("
      SELECT n.nid, n.title FROM {node} AS n
      LEFT JOIN {ding_library} AS dl USING (nid)
      WHERE n.type = 'library'
      ORDER BY dl.library_weight, n.title
    ");

    while ($row = db_fetch_object($node_query)) {
      $row->hours = array();

      $hours_query = db_query("
        SELECT start_time, end_time FROM {opening_hours}
        WHERE nid = %d AND date = '%s'
      ", array(
        ':nid' => $row->nid,
        ':date' => $date,
      ));

      while ($hour_row = db_fetch_object($hours_query)) {
        $row->hours[] = $hour_row;
      }

      $hours[$row->nid] = $row;
    }

    cache_set($cache_key, $hours, $_SERVER['REQUEST_TIME'] + 86400);

    return $hours;
  }
}

/**
 * Get features with opening hours for the provided library.
 *
 * Provides a list of nid => title mappings, suitable for a select box
 * for picking the feature you’d like to see opening hours for.
 */
function ding_library_hours_options($node, $reset = FALSE) {
  $cache_key = __FUNCTION__ . ':' . $node->nid;

  if (!$reset && $cache = cache_get($cache_key)) {
    return $cache->data;
  }
  else {
    $options = array($node->nid => check_plain($node->title));

    // Select node ID and title for related features.
    // TODO: Refactor this to use dynamic table and column names.
    $query = db_query("
      SELECT n.nid, n.title FROM content_field_feature_ref AS cffr
      LEFT JOIN node AS n ON (n.nid = cffr.field_feature_ref_nid)
      WHERE cffr.nid = %d
    ", array(
      ':nid' => $node->nid,
    ));

    while ($row = db_fetch_object($query)) {
      if (opening_hours_present_on_node($row->nid)) {
        $options[$row->nid] = check_plain($row->title);
      }
    }

    cache_set($cache_key, $options);

    return $options;
  }
}

/**
 * Format a time value for display.
 */
function theme_ding_library_hours_time($time) {
  $parts = explode(':', $time);

  return implode('.', array($parts[0], $parts[1]));
}

/**
 * Preprocess variables for the week template.
 */
function ding_library_hours_preprocess_opening_hours_week(&$vars) {
  // Only go through all this extra work for libraries.
  if ($vars['node']->type == 'library') {
    $options = ding_library_hours_options($vars['node']);

    // If there’s more than one option, we need to provide extra data to
    // the page and load our JavaScript.
    if (count($options) > 1) {
      drupal_add_css(drupal_get_path('module', 'ding_library_hours') . '/ding_library_hours.theme.css');
      drupal_add_js(drupal_get_path('module', 'ding_library_hours') . '/ding_library_hours.js');
      drupal_add_js(array('ding' => array('libraryHours' => array($vars['node']->nid => $options))), 'setting');
    }
  }
}
